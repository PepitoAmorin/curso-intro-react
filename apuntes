JSX: sugar syntax para escribir código parecido a HTML en Javascript. JSX produces React “elements”. 

const element = (
  <h1 className="greeting">
    Hello, world!
  </h1>
); 

es lo mismo que: 

const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);

###

Elementos: están dentro de los Componentes. Son VISIBLES para HTML. Parecen etiquetas de HTML, pero en realidad son sugar syntax de React.createElement() para crear elementos (ver líneas 3 a 15). 

Elements are the smallest building blocks of React apps. Elements are what components are “made of”. 

However, elements can also represent user-defined components. 

const element = <Welcome name="Sara" />; 



### 

Componentes: antes se hacían con classes. Ahora se hacen con funciones. Se crean con mayúscula. 

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

Los Componentes son INVISIBLES para HTML, pero son VISIBLES para React. 

Always start component names with a capital letter.React treats components starting with lowercase letters as DOM tags. For example, <div /> represents an HTML div tag, but <Div /> represents a component and requires Div to be in scope. 

                           (index.js)
                               |
                              App
                            /     \
                  Componente      Componente 
                    /     \ 
          Componente      Componente 

Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.

All React components must act like pure functions with respect to their props. They must not attempt to change their inputs, and always return the same result for the same inputs. 

###

Propiedades: son como los atributos de la etiqueta HTML o parámetros en una función (en realidad son parámetros del "componente función"), pero en el Componente de React. Se llama al componente para renderizar y se le pasan las props al componente para que cuando renderice lo haga con esas propiedades. 

function Saludo(props) {
  return (
    <div>
      <h1> 
        "Hola {props.name}, cómo estás chupa pija!"
      </h1>
    </div>
  ); 
} 

ReactDOM.render(
  <Saludo name="Juan Carlos"/>, 
  document.getElementById('root)
); 

Las propiedades se pasan desde arriba hacia abajo (ver diagrama). 

Hay una propiedad especial, { props.children }, que pasa todo lo que haya entre las etiquetas de apertura y cierre del componente renderizándose como props al Componente. 

### 

State is similar to props, but it is private and fully controlled by the component.

